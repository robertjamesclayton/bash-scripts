#!/bin/bash

#todo
comment="My new review"


usage() {
  echo "ccrev [-c -r <reviewer> -o <observer> [-t title | -i <jira-issue>]]"
}

get_title() {
  local issueNo=$1
  local title=$2
  # if issue is not defined use the title
  if [[ $issueNo = *[!\ ]* ]]; then
    #get the issue text
      title="$(jira show -o summary $issueNo)"
  fi
  echo $title
}
get_commit_messages(){
  local issueNo=$1
  local summary=$2
  local reviewerName=$3

  echo "-m\"Fixed $issueNo:$summary\" -m\"Reviewed By:$reviewerName\" -m\"Jira Issue URL: https://avid-ondemand.atlassian.net/browse/$issueNo\""
}

do_commit(){
   git commit . $1;
}

try_commit() {

  local docommit=$1
  local issueNo=$2
  local summary=$3
  local reviewerName=$4

  if [ -z $docommit ]; then
    echo "no commit";
  else
    local commitMessages=$(get_commit_messages $issueNo "$summary" $reviewerName)
    do_commit "$commitMessages"
  fi

}


while getopts "t:r:o:i:c"  opt
do
  case $opt in
    t)
      title=$OPTARG
      ;;
    r)
      reviewer=$OPTARG
      ;;
    o)
      observer=$OPTARG
      ;;
    i)
      issue=$OPTARG
      ;;

    c)
      commit="yes"
      ;;
    \?)
      echo "invalid option"
      usage
      ;;
  esac
done

actualTitle=$(get_title $issue "$title")
try_commit $commit $issue "$actualTitle" $reviewer


transaction_no=$(ccollab --no-browser addgitdiffs new HEAD^| awk 'match($0,/[0-9]+\.$/){print substr($0,RSTART,RLENGTH-1)}')
ccollab admin review edit --title "\"$actualTitle\"" $transaction_no
ccollab admin review participant assign $transaction_no "\"$reviewer\"" 'Reviewer'
ccollab admin review participant assign $transaction_no "\"$observer\"" 'Observer'
ccollab admin review finish $transaction_no
